plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.1'
	id 'io.spring.dependency-management' version '1.1.5'
	id 'jacoco'
}

group = 'com.codeit'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// web
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	// jpa
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	// database
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.mysql:mysql-connector-j'

	// utils
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.withType(JavaCompile) {
	options.generatedSourceOutputDirectory = file("$projectDir/build/generated")
}

sourceSets {
	main {
		java {
			srcDirs += "$projectDir/build/generated"
		}
	}
}

jacoco {
	toolVersion = '0.8.8'
}

jacocoTestReport {
	reports {
		xml.required = true
		csv.required = false
		html.required = true
	}

	def Qdomains = []

	for(qPattern in "**/QA" .. "**/QZ"){
		Qdomains.add(qPattern+"*")
	}

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it,
					exclude: [
							'**/*Application*',
							'**/*Exception*',
							'**/*Dto*',
							'**/*PrivateClaims*',
							'**/config/**',
							'**/common/**',
							'**/infrastructure/**'
					] + Qdomains)
		}))
	}
}

jacocoTestCoverageVerification {
	def Qdomains = []

	for (qPattern in '*.QA'..'*.QZ') {
		Qdomains.add(qPattern + '*')
	}

	violationRules {
		rule {
			element = 'METHOD'

			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 0.50
			}

			limit {
				counter = 'METHOD'
				value = 'COVEREDRATIO'
				minimum = 0.50
			}

			excludes = [
					'*.*Exception*',
					'*.*Dto*',
					'*.*Application*',
					'*.*Dto*',
					'*.*PrivateClaims*',
					'*.config.*',
					'*.common.*',
					'*.infrastructure.*'
			] + Qdomains
		}
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

task jacocoTestCoverage(type: Test) {
	group 'verification'
	description 'Runs the unit tests with coverage'

	dependsOn(
			':test',
			':jacocoTestReport',
			':jacocoTestCoverageVerification'
	)

	tasks['jacocoTestReport'].mustRunAfter(tasks['test'])
	tasks['jacocoTestCoverageVerification'].mustRunAfter(tasks['jacocoTestReport'])
}
